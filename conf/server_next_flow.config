singularity.enabled = true
process.container = '/hpcnfs/data/SM/singularity_nfcore_images/rnaseq_latest.sif'
singularity.runOptions = ' --bind /hpcnfs/ '
process.executor = 'pbspro'
process.clusterOptions = ' -q workq '
process.maxRetries = 5


env {
    PATH='$PATH:/hpcnfs/software/singularity/2.5.1/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
}

params {
  // Limit resources so that this can run on GitHub Actions
  max_cpus = 50
  max_memory = 100.GB
  max_time = 800.h
}

process {
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 2.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 2.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 2.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 2.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 8.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
    cpus = 10
    memory = 35.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
    cpus = 10
    memory = 35.GB
  }
  
  withName: 'NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDCLIP' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDCLIP' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:BEDTOOLS_GENOMECOV' {
    cpus = { check_max( 14 * task.attempt, 'cpus') }
    memory = { check_max( 9.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:CAT_FASTQ' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:CUSTOM_DUMPSOFTWAREVERSIONS' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:DESEQ2_QC_STAR_SALMON' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:DUPRADAR' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 6.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 16.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:MULTIQC' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:MAKE_TRANSCRIPTS_FASTA' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 4.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:STAR_GENOMEGENERATE' {
    cpus = 6
    memory = 33.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:PRESEQ_LCEXTRAP' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUALIMAP_RNASEQ' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 6.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
    cpus = 6
    memory = 8.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_SE_GENE' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_SE_GENE_LENGTH_SCALED' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_SE_GENE_SCALED' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_SE_TRANSCRIPT' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_TX2GENE' {
    cpus = 10
    memory = 16.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_TXIMPORT' {
    cpus = 1
    memory = 2.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_BAMSTAT' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INFEREXPERIMENT' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INNERDISTANCE' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_JUNCTIONANNOTATION' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_JUNCTIONSATURATION' {
   cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'cpus') } 
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_READDISTRIBUTION' {
    cpus = 8
    memory = 8.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_READDUPLICATION' {
    cpus = 2
    memory = 17.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:STRINGTIE_STRINGTIE' {
    cpus = 8
    memory = 8.GB
  }
}
