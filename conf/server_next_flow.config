singularity.enabled = true 
process.container = '/hpcnfs/data/SM/singularity_nfcore_images/rnaseq_latest.sif' 
singularity.runOptions = '--bind /hpcnfs/'

process {
    executor = 'slurm'
    queue = 'workq'
    stageInMode = 'copy'
    scratch = true
    maxRetries = 3
    errorStrategy = { task.exitStatus in [143,137,104,134] ? 'retry' : 'terminate' }

    withName: 'NFCORE_RNASEQ:RNASEQ:CAT_FASTQ' {
        cpus = 2
        memory = 2.GB
        time = '6h'
    }
}

executor {
    queueSize = 10
}

env {
    PATH = '$PATH:/hpcnfs/software/singularity/2.5.1/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
}

params {
    max_cpus   = 50
    max_memory = 100.GB
    max_time   = 800.h
}

process {
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(2.GB * task.attempt, 'memory') }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(2.GB * task.attempt, 'memory') }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(2.GB * task.attempt, 'memory') }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(2.GB * task.attempt, 'memory') }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
    cpus = { check_max(8 * task.attempt, 'cpus') }
    memory = { check_max(8.GB * task.attempt, 'memory') }
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
    cpus = 10
    memory = 40.GB
  }
  withName: 'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
    cpus = 10
    memory = 40.GB
  }
  // ... (mantieni tutte le altre sezioni identiche a prima)
}

